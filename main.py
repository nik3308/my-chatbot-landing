import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from models import create_tables
from database_service import DatabaseService
from notification_service import NotificationService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
COMPANY_NAME = os.getenv('COMPANY_NAME', 'AI-—Ä–µ—à–µ–Ω–∏—è')
MANAGER_PHONE = os.getenv('MANAGER_PHONE', '+7 (XXX) XXX-XX-XX')
MANAGER_EMAIL_CONTACT = os.getenv('MANAGER_EMAIL_CONTACT', 'info@ai-solutions.ru')
WORK_HOURS = os.getenv('WORK_HOURS', '–ü–ù-–ü–¢ —Å 9:00 –¥–æ 18:00 –ú–°–ö')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_service = NotificationService()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ContactForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()

class AdminCommands(StatesGroup):
    waiting_for_broadcast_message = State()

# –î–∞–Ω–Ω—ã–µ –æ –ø–∞–∫–µ—Ç–∞—Ö —É—Å–ª—É–≥
PACKAGES_DATA = {
    "basic": {
        "name": "–ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç",
        "price": "85 000‚ÇΩ",
        "description": "–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫",
        "features": [
            "‚úÖ –ë–∞–∑–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤",
            "‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", 
            "‚úÖ –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É"
        ],
        "timeline": "7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
    },
    "advanced": {
        "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞–∫–µ—Ç", 
        "price": "150 000‚ÇΩ",
        "description": "–£–º–Ω—ã–π –±–æ—Ç —Å –ò–ò –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏",
        "features": [
            "‚úÖ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å –æ–±—É—á–µ–Ω–∏–µ–º",
            "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM —Å–∏—Å—Ç–µ–º–∞–º–∏",
            "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤"
        ],
        "timeline": "7-10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
    },
    "premium": {
        "name": "–ü—Ä–µ–º–∏—É–º-–ø–∞–∫–µ—Ç",
        "price": "250 000‚ÇΩ", 
        "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π",
        "features": [
            "‚úÖ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            "‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
            "‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 2 –º–µ—Å—è—Ü–∞"
        ],
        "timeline": "10-14 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
    }
}

# –≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
DEVELOPMENT_STAGES = [
    "1Ô∏è‚É£ **–ê–Ω–∞–ª–∏–∑ (1-2 –¥–Ω—è)**: –ò–∑—É—á–∞–µ–º –≤–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ü–µ–ª–∏. –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤.",
    "2Ô∏è‚É£ **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (3-4 –¥–Ω—è)**: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∞—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.",
    "3Ô∏è‚É£ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (1-2 –¥–Ω—è)**: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –æ–±—É—á–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º.",
    "4Ô∏è‚É£ **–ó–∞–ø—É—Å–∫ (1 –¥–µ–Ω—å)**: –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, –æ–±—É—á–∞–µ–º –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É —Ä–∞–±–æ—Ç–µ —Å —Å–∏—Å—Ç–µ–º–æ–π."
]

def get_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üì¶ –ü–∞–∫–µ—Ç—ã —É—Å–ª—É–≥", callback_data="packages"))
    builder.add(InlineKeyboardButton(text="üîß –≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", callback_data="stages"))
    builder.add(InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="contact"))
    builder.add(InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é", callback_data="direct_contact"))
    builder.adjust(1)
    return builder.as_markup()

def get_packages_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí´ –ë–∞–∑–æ–≤—ã–π", callback_data="package_basic"))
    builder.add(InlineKeyboardButton(text="‚≠ê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="package_advanced"))
    builder.add(InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º", callback_data="package_premium"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    builder.adjust(1)
    return builder.as_markup()

def get_back_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    return builder.as_markup()

def get_contact_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∑–∞—è–≤–∫–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìû –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="start_contact"))
    builder.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    builder.adjust(1)
    return builder.as_markup()

async def register_user(message_or_callback):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    user = message_or_callback.from_user
    DatabaseService.get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await register_user(message)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    DatabaseService.log_user_action(
        telegram_id=message.from_user.id,
        action="start"
    )
    
    welcome_text = (
        f"ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ **\"{COMPANY_NAME}\"**!\n\n"
        "–ü–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚Ä¢ üìã –£–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö –ø–∞–∫–µ—Ç–∞—Ö —É—Å–ª—É–≥ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —á–∞—Ç-–±–æ—Ç–æ–≤\n"
        "‚Ä¢ üîß –ü–æ–Ω—è—Ç—å —ç—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
        "‚Ä¢ üí∞ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n"
        "‚Ä¢ üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n\n"
        "**–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?** üëá"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("admin"))
async def admin_commands(message: types.Message):
    """–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω —á–∞—Ç–∞)"""
    admin_chat_id = os.getenv('ADMIN_CHAT_ID')
    if admin_chat_id and str(message.chat.id) == admin_chat_id:
        admin_text = (
            "üîß **–ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´**\n\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫\n"
            "/report - –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "/export - –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫\n\n"
            "üîó [–í–µ–±-–∞–¥–º–∏–Ω–∫–∞](https://my-chatbot-landing.herokuapp.com)"
        )
        await message.answer(admin_text, parse_mode="Markdown")

@dp.message(Command("stats"))
async def admin_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    admin_chat_id = os.getenv('ADMIN_CHAT_ID')
    if admin_chat_id and str(message.chat.id) == admin_chat_id:
        try:
            total_apps = DatabaseService.get_applications_count()
            recent_apps = DatabaseService.get_recent_applications(limit=10)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞–∫–µ—Ç–∞–º
            package_stats = {'basic': 0, 'advanced': 0, 'premium': 0, 'none': 0}
            for app in recent_apps:
                if app.package_interest:
                    package_stats[app.package_interest] = package_stats.get(app.package_interest, 0) + 1
                else:
                    package_stats['none'] += 1
            
            stats_text = (
                f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n"
                f"üìã **–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫**: {total_apps}\n\n"
                f"üì¶ **–ü–æ –ø–∞–∫–µ—Ç–∞–º**:\n"
                f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π: {package_stats['basic']}\n"
                f"‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π: {package_stats['advanced']}\n"
                f"‚Ä¢ –ü—Ä–µ–º–∏—É–º: {package_stats['premium']}\n"
                f"‚Ä¢ –ë–µ–∑ –ø–∞–∫–µ—Ç–∞: {package_stats['none']}\n\n"
                f"üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫ –≤ –∞–¥–º–∏–Ω–∫–µ"
            )
            
            await message.answer(stats_text, parse_mode="Markdown")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@dp.message(Command("report"))
async def admin_daily_report(message: types.Message):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    admin_chat_id = os.getenv('ADMIN_CHAT_ID')
    if admin_chat_id and str(message.chat.id) == admin_chat_id:
        await notification_service.send_daily_report()

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await register_user(callback)
    
    welcome_text = (
        "ü§ñ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
    )
    
    await callback.message.edit_text(
        welcome_text,
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "direct_contact")
async def show_direct_contact(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä—è–º—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    await register_user(callback)
    
    contact_text = (
        f"üìû **–ü–†–Ø–ú–ê–Ø –°–í–Ø–ó–¨ –° {COMPANY_NAME.upper()}**\n\n"
        f"**–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:**\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {MANAGER_PHONE}\n"
        f"üìß Email: {MANAGER_EMAIL_CONTACT}\n\n"
        f"‚è∞ **–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è**: {WORK_HOURS}\n\n"
        f"üí° **–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ**:\n"
        f"‚Ä¢ üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
        f"‚Ä¢ üì¶ –ò–∑—É—á–∏—Ç—å –Ω–∞—à–∏ –ø–∞–∫–µ—Ç—ã —É—Å–ª—É–≥\n"
        f"‚Ä¢ üîß –£–∑–Ω–∞—Ç—å —ç—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n\n"
        f"**–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!** ‚ö°"
    )
    
    await callback.message.edit_text(
        contact_text,
        reply_markup=get_back_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "packages") 
async def show_packages(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç—ã —É—Å–ª—É–≥"""
    await register_user(callback)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–∫–µ—Ç–æ–≤
    DatabaseService.log_user_action(
        telegram_id=callback.from_user.id,
        action="view_packages"
    )
    
    packages_text = (
        "üì¶ **–ù–∞—à–∏ –ø–∞–∫–µ—Ç—ã —É—Å–ª—É–≥**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n"
        "–í—Å–µ –±–æ—Ç—ã –æ–∫—É–ø–∞—é—Ç—Å—è –∑–∞ 1-3 –º–µ—Å—è—Ü–∞! üí∞\n\n"
        "**–ö–∞–∫–æ–π –ø–∞–∫–µ—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?**"
    )
    
    await callback.message.edit_text(
        packages_text,
        reply_markup=get_packages_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("package_"))
async def show_package_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
    await register_user(callback)
    
    package_type = callback.data.replace("package_", "")
    package = PACKAGES_DATA.get(package_type)
    
    if not package:
        await callback.answer("–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    DatabaseService.log_user_action(
        telegram_id=callback.from_user.id,
        action="view_package_details",
        data={"package": package_type}
    )
    
    features_text = "\n".join(package["features"])
    
    package_text = (
        f"üíº **{package['name']}**\n\n"
        f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å**: {package['price']}\n"
        f"‚è± **–°—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏**: {package['timeline']}\n\n"
        f"**–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:**\n{features_text}\n\n"
        f"üìù {package['description']}\n\n"
        f"**–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?**"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"contact_package_{package_type}"))
    builder.add(InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é", callback_data="direct_contact"))
    builder.add(InlineKeyboardButton(text="üì¶ –î—Ä—É–≥–∏–µ –ø–∞–∫–µ—Ç—ã", callback_data="packages"))
    builder.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        package_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "stages")
async def show_stages(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    await register_user(callback)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–∞–ø–æ–≤
    DatabaseService.log_user_action(
        telegram_id=callback.from_user.id,
        action="view_stages"
    )
    
    stages_text = (
        "üîß **–≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç-–±–æ—Ç–∞**\n\n"
        "**–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ ‚Äî 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π** ‚ö°\n\n"
    )
    
    stages_text += "\n\n".join(DEVELOPMENT_STAGES)
    
    stages_text += (
        "\n\n‚ú® **–û—Ç –∏–¥–µ–∏ –¥–æ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞ ‚Äî –≤—Å–µ–≥–æ –Ω–µ–¥–µ–ª—è!**\n"
        "üíé –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ‚Äî **–±–µ—Å–ø–ª–∞—Ç–Ω–æ**"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞–∫–µ—Ç—ã", callback_data="packages"))
    builder.add(InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="contact"))
    builder.add(InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é", callback_data="direct_contact"))
    builder.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        stages_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "contact")
async def show_contact_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ"""
    await register_user(callback)
    await handle_contact_request(callback, package_interest=None)

@dp.callback_query(F.data.startswith("contact_package_"))
async def show_contact_info_with_package(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ —Å –ø—Ä–µ–¥–≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞–∫–µ—Ç–æ–º"""
    await register_user(callback)
    package_type = callback.data.replace("contact_package_", "")
    await handle_contact_request(callback, package_interest=package_type)

async def handle_contact_request(callback: types.CallbackQuery, package_interest: str = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    telegram_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∞–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—è–≤–∫—É
    has_application = DatabaseService.has_user_submitted_application(telegram_id)
    
    if has_application:
        contact_text = (
            "üìã **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞!**\n\n"
            "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏, "
            "–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.\n\n"
            f"‚è∞ **–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è**: {WORK_HOURS}\n\n"
            "**–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?**"
        )
    else:
        contact_text = (
            "üìù **–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É**\n\n"
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
            "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è:\n\n"
            "‚Ä¢ üí∞ –†–∞—Å—á–µ—Ç–∞ —Ç–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞\n"
            "‚Ä¢ üìã –û–±—Å—É–∂–¥–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π\n"
            "‚Ä¢ ‚è± –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
            "‚Ä¢ üéØ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
        )
        
        if package_interest:
            package_name = PACKAGES_DATA.get(package_interest, {}).get("name", "")
            contact_text += f"üì¶ **–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–∞–∫–µ—Ç**: {package_name}\n\n"
        
        contact_text += f"‚è∞ **–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è**: {WORK_HOURS}\n\n**–ì–æ—Ç–æ–≤—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç?**"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–∞–∫–µ—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if package_interest:
        DatabaseService.save_dialog_state(
            telegram_id=telegram_id,
            state="package_interest",
            data={"package": package_interest}
        )
    
    builder = InlineKeyboardBuilder()
    button_text = "üìû –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" if has_application else "üìû –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"
    builder.add(InlineKeyboardButton(text=button_text, callback_data="start_contact"))
    builder.add(InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é", callback_data="direct_contact"))
    builder.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        contact_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "start_contact")
async def start_contact_collection(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await register_user(callback)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    DatabaseService.log_user_action(
        telegram_id=callback.from_user.id,
        action="start_contact_form"
    )
    
    await state.set_state(ContactForm.waiting_for_name)
    
    contact_text = (
        "üë§ **–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    await callback.message.edit_text(
        contact_text,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.message(ContactForm.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏"""
    await register_user(message)
    
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer(
            "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        return
    
    await state.update_data(name=name)
    await state.set_state(ContactForm.waiting_for_phone)
    
    phone_text = (
        f"üìû **–û—Ç–ª–∏—á–Ω–æ, {name}!**\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: +7 (999) 123-45-67"
    )
    
    await message.answer(phone_text, parse_mode="Markdown")

@dp.message(ContactForm.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await register_user(message)
    
    phone = message.text.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if len(phone) < 10 or not any(char.isdigit() for char in phone):
        await message.answer(
            "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: +7 (999) 123-45-67 –∏–ª–∏ 89991234567"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    name = data.get("name")
    telegram_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    dialog_state, dialog_data = DatabaseService.get_dialog_state(telegram_id)
    package_interest = dialog_data.get("package") if dialog_data else None
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        application = DatabaseService.create_application(
            telegram_id=telegram_id,
            name=name,
            phone=phone,
            package_interest=package_interest
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        DatabaseService.update_user_contact_data(telegram_id, name, phone)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏
        DatabaseService.log_user_action(
            telegram_id=telegram_id,
            action="submit_application",
            data={
                "application_id": application.id,
                "name": name,
                "phone": phone,
                "package_interest": package_interest
            }
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
        application_data = {
            'id': application.id,
            'name': name,
            'phone': phone,
            'package_interest': package_interest,
            'user_id': telegram_id,
            'created_at': application.created_at.strftime('%d.%m.%Y %H:%M')
        }
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        asyncio.create_task(notification_service.send_all_notifications(application_data))
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        DatabaseService.clear_dialog_state(telegram_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        success_text = (
            f"‚úÖ **–°–ø–∞—Å–∏–±–æ, {name}!**\n\n"
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! üéâ\n\n"
            f"üìã **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        )
        
        if package_interest:
            package_name = PACKAGES_DATA.get(package_interest, {}).get("name", "")
            success_text += f"üì¶ –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–∞–∫–µ—Ç: {package_name}\n"
        
        success_text += (
            f"\nüÜî **–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏**: #{application.id}\n\n"
            f"üíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è "
            f"–¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\n"
            f"‚è∞ **–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è**: {WORK_HOURS}\n\n"
            f"üìû **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å**: {MANAGER_PHONE}\n"
            f"üìß **Email**: {MANAGER_EMAIL_CONTACT}\n\n"
            f"üöÄ **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏**:\n"
            f"‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–∑—É—á–∏—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å\n"
            f"‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
            f"‚Ä¢ –°–≤—è–∂–µ—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n"
            f"‚Ä¢ –°–æ—Å—Ç–∞–≤–∏—Ç –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–≥–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
        logging.info(
            f"üÜï –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{application.id}\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üì¶ –ü–∞–∫–µ—Ç: {package_interest or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üÜî Telegram ID: {telegram_id}\n"
            f"‚è∞ –í—Ä–µ–º—è: {application.created_at}"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        success_text = (
            f"‚ùå **–ò–∑–≤–∏–Ω–∏—Ç–µ, {name}!**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.\n\n"
            f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:**\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {MANAGER_PHONE}\n"
            f"‚Ä¢ Email: {MANAGER_EMAIL_CONTACT}\n\n"
            f"‚è∞ **–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è**: {WORK_HOURS}"
        )
    
    await message.answer(
        success_text,
        reply_markup=get_back_menu(),
        parse_mode="Markdown"
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

@dp.message()
async def unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await register_user(message)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    DatabaseService.log_user_action(
        telegram_id=message.from_user.id,
        action="unknown_message",
        data={"text": message.text[:100]}  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
    )
    
    unknown_text = (
        "ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n"
        "‚Ä¢ üì¶ –£–∑–Ω–∞—Ç—å –æ –ø–∞–∫–µ—Ç–∞—Ö —É—Å–ª—É–≥\n"
        "‚Ä¢ üîß –ò–∑—É—á–∏—Ç—å —ç—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n" 
        "‚Ä¢ üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–∞\n"
        "‚Ä¢ üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é\n\n"
        "**–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:**"
    )
    
    await message.answer(
        unknown_text,
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        create_tables()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        await bot.delete_webhook(drop_pending_updates=True)
        print("‚úÖ Webhook —É–¥–∞–ª–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling")
        
        print(f"ü§ñ –ë–æ—Ç –¥–ª—è {COMPANY_NAME} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {DatabaseService.get_applications_count()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        admin_chat_id = os.getenv('ADMIN_CHAT_ID')
        manager_email = os.getenv('MANAGER_EMAIL')
        
        print("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        if admin_chat_id:
            print(f"   ‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {admin_chat_id}")
        else:
            print("   ‚ùå Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        if manager_email:
            print(f"   ‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {manager_email}")
        else:
            print("   ‚ùå Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())


#!/usr/bin/env python3
"""
–í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat.id
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ main.py –≤—Ä–µ–º–µ–Ω–Ω–æ
"""

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ main.py:

@dp.message(Command("getchatid"))
async def get_chat_id(message: types.Message):
    """–ü–æ–ª—É—á–∞–µ—Ç chat.id –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    chat_info = (
        f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n\n"
        f"üÜî **Chat ID**: `{message.chat.id}`\n"
        f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ**: {message.chat.title or '–õ–∏—á–Ω—ã–π —á–∞—Ç'}\n"
        f"üë• **–¢–∏–ø**: {message.chat.type}\n"
        f"üë§ **–í–∞—à ID**: `{message.from_user.id}`\n\n"
        f"üîß **–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**\n"
        f"`heroku config:set ADMIN_CHAT_ID=\"{message.chat.id}\" -a my-chatbot-landing`"
    )
    
    await message.answer(chat_info, parse_mode="Markdown")
    
    # –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"CHAT INFO: ID={message.chat.id}, Type={message.chat.type}, Title={message.chat.title}")

# –î–æ–±–∞–≤—å—Ç–µ —Ç–∞–∫–∂–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:

@dp.message()
async def debug_message(message: types.Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    # –¢–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "debug"
    if message.chat.type in ['group', 'supergroup'] and 'debug' in message.text.lower():
        debug_info = (
            f"üêõ **DEBUG INFO:**\n"
            f"Chat ID: `{message.chat.id}`\n"
            f"User ID: `{message.from_user.id}`\n"
            f"Message ID: {message.message_id}\n"
            f"Chat Type: {message.chat.type}"
        )
        await message.answer(debug_info, parse_mode="Markdown")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"MESSAGE: Chat={message.chat.id}, User={message.from_user.id}, Text='{message.text[:50]}...'")
