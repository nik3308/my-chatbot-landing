import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ContactForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()

# –î–∞–Ω–Ω—ã–µ –æ –ø–∞–∫–µ—Ç–∞—Ö —É—Å–ª—É–≥
PACKAGES_DATA = {
    "basic": {
        "name": "–ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç",
        "price": "85 000‚ÇΩ",
        "description": "–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫",
        "features": [
            "‚úÖ –ë–∞–∑–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤",
            "‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", 
            "‚úÖ –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É"
        ],
        "timeline": "7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
    },
    "advanced": {
        "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞–∫–µ—Ç", 
        "price": "150 000‚ÇΩ",
        "description": "–£–º–Ω—ã–π –±–æ—Ç —Å –ò–ò –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏",
        "features": [
            "‚úÖ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å –æ–±—É—á–µ–Ω–∏–µ–º",
            "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM —Å–∏—Å—Ç–µ–º–∞–º–∏",
            "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤"
        ],
        "timeline": "7-10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
    },
    "premium": {
        "name": "–ü—Ä–µ–º–∏—É–º-–ø–∞–∫–µ—Ç",
        "price": "250 000‚ÇΩ", 
        "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π",
        "features": [
            "‚úÖ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            "‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
            "‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 2 –º–µ—Å—è—Ü–∞"
        ],
        "timeline": "10-14 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
    }
}

# –≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
DEVELOPMENT_STAGES = [
    "1Ô∏è‚É£ **–ê–Ω–∞–ª–∏–∑ (1-2 –¥–Ω—è)**: –ò–∑—É—á–∞–µ–º –≤–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ü–µ–ª–∏. –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤.",
    "2Ô∏è‚É£ **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (3-4 –¥–Ω—è)**: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∞—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.",
    "3Ô∏è‚É£ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (1-2 –¥–Ω—è)**: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –æ–±—É—á–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º.",
    "4Ô∏è‚É£ **–ó–∞–ø—É—Å–∫ (1 –¥–µ–Ω—å)**: –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, –æ–±—É—á–∞–µ–º –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É —Ä–∞–±–æ—Ç–µ —Å —Å–∏—Å—Ç–µ–º–æ–π."
]

def get_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üì¶ –ü–∞–∫–µ—Ç—ã —É—Å–ª—É–≥", callback_data="packages"))
    builder.add(InlineKeyboardButton(text="üîß –≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", callback_data="stages"))
    builder.add(InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="contact"))
    builder.adjust(1)
    return builder.as_markup()

def get_packages_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí´ –ë–∞–∑–æ–≤—ã–π", callback_data="package_basic"))
    builder.add(InlineKeyboardButton(text="‚≠ê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="package_advanced"))
    builder.add(InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º", callback_data="package_premium"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    builder.adjust(1)
    return builder.as_markup()

def get_back_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    return builder.as_markup()

def get_contact_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∑–∞—è–≤–∫–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìû –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="start_contact"))
    builder.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    builder.adjust(1)
    return builder.as_markup()

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ **\"AI-—Ä–µ—à–µ–Ω–∏—è\"**!\n\n"
        "–ü–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚Ä¢ üìã –£–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö –ø–∞–∫–µ—Ç–∞—Ö —É—Å–ª—É–≥ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —á–∞—Ç-–±–æ—Ç–æ–≤\n"
        "‚Ä¢ üîß –ü–æ–Ω—è—Ç—å —ç—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
        "‚Ä¢ üí∞ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n"
        "‚Ä¢ üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n\n"
        "**–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?** üëá"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = (
        "ü§ñ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
    )
    
    await callback.message.edit_text(
        welcome_text,
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "packages") 
async def show_packages(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç—ã —É—Å–ª—É–≥"""
    packages_text = (
        "üì¶ **–ù–∞—à–∏ –ø–∞–∫–µ—Ç—ã —É—Å–ª—É–≥**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n"
        "–í—Å–µ –±–æ—Ç—ã –æ–∫—É–ø–∞—é—Ç—Å—è –∑–∞ 1-3 –º–µ—Å—è—Ü–∞! üí∞\n\n"
        "**–ö–∞–∫–æ–π –ø–∞–∫–µ—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?**"
    )
    
    await callback.message.edit_text(
        packages_text,
        reply_markup=get_packages_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("package_"))
async def show_package_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
    package_type = callback.data.replace("package_", "")
    package = PACKAGES_DATA.get(package_type)
    
    if not package:
        await callback.answer("–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    features_text = "\n".join(package["features"])
    
    package_text = (
        f"üíº **{package['name']}**\n\n"
        f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å**: {package['price']}\n"
        f"‚è± **–°—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏**: {package['timeline']}\n\n"
        f"**–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:**\n{features_text}\n\n"
        f"üìù {package['description']}\n\n"
        f"**–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?**"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="contact"))
    builder.add(InlineKeyboardButton(text="üì¶ –î—Ä—É–≥–∏–µ –ø–∞–∫–µ—Ç—ã", callback_data="packages"))
    builder.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        package_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "stages")
async def show_stages(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    stages_text = (
        "üîß **–≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç-–±–æ—Ç–∞**\n\n"
        "**–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ ‚Äî 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π** ‚ö°\n\n"
    )
    
    stages_text += "\n\n".join(DEVELOPMENT_STAGES)
    
    stages_text += (
        "\n\n‚ú® **–û—Ç –∏–¥–µ–∏ –¥–æ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞ ‚Äî –≤—Å–µ–≥–æ –Ω–µ–¥–µ–ª—è!**\n"
        "üíé –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ‚Äî **–±–µ—Å–ø–ª–∞—Ç–Ω–æ**"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞–∫–µ—Ç—ã", callback_data="packages"))
    builder.add(InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="contact"))
    builder.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        stages_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "contact")
async def show_contact_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ"""
    contact_text = (
        "üìù **–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É**\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è:\n\n"
        "‚Ä¢ üí∞ –†–∞—Å—á–µ—Ç–∞ —Ç–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞\n"
        "‚Ä¢ üìã –û–±—Å—É–∂–¥–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π\n"
        "‚Ä¢ ‚è± –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
        "‚Ä¢ üéØ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
        "**–ì–æ—Ç–æ–≤—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç?**"
    )
    
    await callback.message.edit_text(
        contact_text,
        reply_markup=get_contact_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "start_contact")
async def start_contact_collection(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await state.set_state(ContactForm.waiting_for_name)
    
    contact_text = (
        "üë§ **–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    await callback.message.edit_text(
        contact_text,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.message(ContactForm.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer(
            "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        return
    
    await state.update_data(name=name)
    await state.set_state(ContactForm.waiting_for_phone)
    
    phone_text = (
        f"üìû **–û—Ç–ª–∏—á–Ω–æ, {name}!**\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: +7 (999) 123-45-67"
    )
    
    await message.answer(phone_text, parse_mode="Markdown")

@dp.message(ContactForm.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if len(phone) < 10 or not any(char.isdigit() for char in phone):
        await message.answer(
            "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: +7 (999) 123-45-67 –∏–ª–∏ 89991234567"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    name = data.get("name")
    
    # –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    logging.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {name} - {phone}")
    
    success_text = (
        f"‚úÖ **–°–ø–∞—Å–∏–±–æ, {name}!**\n\n"
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! üéâ\n\n"
        f"üìã **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        "üíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è "
        "–¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\n"
        "**–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è**: –ü–ù-–ü–¢ —Å 9:00 –¥–æ 18:00 –ú–°–ö ‚è∞"
    )
    
    await message.answer(
        success_text,
        reply_markup=get_back_menu(),
        parse_mode="Markdown"
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ  
    await state.clear()

@dp.message()
async def unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    unknown_text = (
        "ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n"
        "‚Ä¢ üì¶ –£–∑–Ω–∞—Ç—å –æ –ø–∞–∫–µ—Ç–∞—Ö —É—Å–ª—É–≥\n"
        "‚Ä¢ üîß –ò–∑—É—á–∏—Ç—å —ç—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n" 
        "‚Ä¢ üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–∞\n\n"
        "**–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:**"
    )
    
    await message.answer(
        unknown_text,
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
