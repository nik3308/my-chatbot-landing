#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–ó–∞–ø—É—Å–∫: python admin.py
"""

import os
from datetime import datetime
from models import get_database_url, SessionLocal
from database_service import DatabaseService
from sqlalchemy import create_engine, text

def print_separator():
    print("=" * 60)

def print_header(title):
    print_separator()
    print(f"üéØ {title}")
    print_separator()

def format_datetime(dt):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if dt:
        return dt.strftime("%d.%m.%Y %H:%M")
    return "‚Äî"

def show_applications():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏"""
    print_header("–ó–ê–Ø–í–ö–ò –ö–õ–ò–ï–ù–¢–û–í")
    
    try:
        applications = DatabaseService.get_recent_applications(limit=50)
        
        if not applications:
            print("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        print(f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {DatabaseService.get_applications_count()}")
        print()
        
        for app in applications:
            status_emoji = {
                'new': 'üÜï',
                'contacted': 'üìû',
                'closed': '‚úÖ'
            }.get(app.status, '‚ùì')
            
            package_name = ""
            if app.package_interest:
                packages = {
                    'basic': '–ë–∞–∑–æ–≤—ã–π',
                    'advanced': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', 
                    'premium': '–ü—Ä–µ–º–∏—É–º'
                }
                package_name = f" | üì¶ {packages.get(app.package_interest, app.package_interest)}"
            
            print(f"{status_emoji} –ó–∞—è–≤–∫–∞ #{app.id}")
            print(f"   üë§ {app.name}")
            print(f"   üìû {app.phone}")
            print(f"   üÜî Telegram ID: {app.user_id}")
            print(f"   ‚è∞ {format_datetime(app.created_at)}{package_name}")
            if app.notes:
                print(f"   üìù {app.notes}")
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")

def show_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print_header("–°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    
    try:
        db = SessionLocal()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
        total_apps = DatabaseService.get_applications_count()
        print(f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_apps}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–∫–µ—Ç–∞–º
        result = db.execute(text("""
            SELECT package_interest, COUNT(*) as count 
            FROM applications 
            WHERE package_interest IS NOT NULL 
            GROUP BY package_interest
        """)).fetchall()
        
        print("\nüì¶ –ü–æ –ø–∞–∫–µ—Ç–∞–º:")
        package_names = {
            'basic': '–ë–∞–∑–æ–≤—ã–π',
            'advanced': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
            'premium': '–ü—Ä–µ–º–∏—É–º'
        }
        
        for row in result:
            package_name = package_names.get(row[0], row[0])
            print(f"   ‚Ä¢ {package_name}: {row[1]}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        result = db.execute(text("""
            SELECT DATE(created_at) as date, COUNT(*) as count 
            FROM applications 
            GROUP BY DATE(created_at) 
            ORDER BY date DESC 
            LIMIT 7
        """)).fetchall()
        
        print("\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:")
        for row in result:
            date_str = row[0].strftime("%d.%m.%Y") if hasattr(row[0], 'strftime') else str(row[0])
            print(f"   ‚Ä¢ {date_str}: {row[1]}")
        
        db.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print_header("–¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î")
    
    try:
        database_url = get_database_url()
        print(f"üîó URL –ë–î: {database_url[:50]}...")
        
        engine = create_engine(database_url)
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1")).fetchone()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        db = SessionLocal()
        try:
            apps_count = db.execute(text("SELECT COUNT(*) FROM applications")).scalar()
            users_count = db.execute(text("SELECT COUNT(*) FROM users")).scalar()
            print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            print(f"üìä –ó–∞—è–≤–æ–∫: {apps_count}")
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

def show_recent_activity():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    print_header("–ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨")
    
    try:
        db = SessionLocal()
        
        result = db.execute(text("""
            SELECT telegram_id, action, data, created_at 
            FROM bot_metrics 
            ORDER BY created_at DESC 
            LIMIT 10
        """)).fetchall()
        
        if not result:
            print("üì≠ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        action_names = {
            'start': 'üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
            'view_packages': 'üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–∫–µ—Ç–æ–≤',
            'view_package_details': 'üëÄ –î–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞',
            'view_stages': 'üîß –≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
            'start_contact_form': 'üìù –ù–∞—á–∞–ª–æ –∑–∞—è–≤–∫–∏',
            'submit_application': '‚úÖ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏',
            'unknown_message': '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        }
        
        for row in result:
            telegram_id, action, data, created_at = row
            action_name = action_names.get(action, action)
            time_str = format_datetime(created_at)
            print(f"{action_name} | ID: {telegram_id} | {time_str}")
        
        db.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    while True:
        print_header("–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ AI-–†–ï–®–ï–ù–ò–Ø")
        print("1. üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏")
        print("2. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("3. üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å") 
        print("4. üîß –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print()
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-4): ").strip()
        
        if choice == "1":
            show_applications()
        elif choice == "2":
            show_statistics()
        elif choice == "3":
            show_recent_activity()
        elif choice == "4":
            test_connection()
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        print("\n" * 2)

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.getenv('DATABASE_URL') and not os.path.exists('bot.db'):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DATABASE_URL –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ bot.db")
        exit(1)
    
    try:
        main_menu()
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥ –ø–æ Ctrl+C")