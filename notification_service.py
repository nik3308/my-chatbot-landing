import asyncio
import logging
import os
from datetime import datetime

try:
    import smtplib
    from email.mime.text import MimeText
    from email.mime.multipart import MimeMultipart
    EMAIL_AVAILABLE = True
except ImportError:
    EMAIL_AVAILABLE = False
    print("‚ö†Ô∏è Email –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

try:
    from aiogram import Bot
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    print("‚ö†Ô∏è Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
    
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.admin_chat_id = os.getenv('ADMIN_CHAT_ID')
        self.manager_email = os.getenv('MANAGER_EMAIL')
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.smtp_username = os.getenv('SMTP_USERNAME')
        self.smtp_password = os.getenv('SMTP_PASSWORD')
        
    async def send_telegram_notification(self, application_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω-—á–∞—Ç"""
        if not TELEGRAM_AVAILABLE:
            print("‚ùå Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
            
        if not self.bot_token or not self.admin_chat_id:
            print("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–Ω–µ—Ç BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID)")
            return False
            
        try:
            bot = Bot(token=self.bot_token)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞
            package_names = {
                'basic': '–ë–∞–∑–æ–≤—ã–π (85 000‚ÇΩ)',
                'advanced': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (150 000‚ÇΩ)',
                'premium': '–ü—Ä–µ–º–∏—É–º (250 000‚ÇΩ)'
            }
            package_name = package_names.get(
                application_data.get('package_interest', ''), 
                application_data.get('package_interest', '–Ω–µ —É–∫–∞–∑–∞–Ω')
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üÜï **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{application_data['id']}**\n\n"
                f"üë§ **–ö–ª–∏–µ–Ω—Ç**: {application_data['name']}\n"
                f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω**: `{application_data['phone']}`\n"
                f"üì¶ **–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–∞–∫–µ—Ç**: {package_name}\n"
                f"üÜî **Telegram ID**: {application_data['user_id']}\n"
                f"‚è∞ **–í—Ä–µ–º—è**: {application_data['created_at']}\n\n"
                f"üîó **–ê–¥–º–∏–Ω–∫–∞**: https://my-chatbot-landing.herokuapp.com\n\n"
                f"‚ö° **–î–µ–π—Å—Ç–≤–∏—è**:\n"
                f"‚Ä¢ –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è\n"
                f"‚Ä¢ –û–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞\n"
                f"‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
            )
            
            await bot.send_message(
                chat_id=self.admin_chat_id,
                text=message,
                parse_mode="Markdown"
            )
            
            await bot.session.close()
            print(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_data['id']}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def send_email_notification(self, application_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
        if not EMAIL_AVAILABLE:
            print("‚ùå Email –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
            
        if not all([self.manager_email, self.smtp_username, self.smtp_password]):
            print("‚ö†Ô∏è Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
            
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MimeMultipart()
            msg['From'] = self.smtp_username
            msg['To'] = self.manager_email
            msg['Subject'] = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{application_data['id']} - {application_data['name']}"
            
            # –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            text_body = f"""
–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{application_data['id']}

–ö–ª–∏–µ–Ω—Ç: {application_data['name']}
–¢–µ–ª–µ—Ñ–æ–Ω: {application_data['phone']}
Telegram ID: {application_data['user_id']}
–í—Ä–µ–º—è: {application_data['created_at']}

–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: https://my-chatbot-landing.herokuapp.com
            """
            
            msg.attach(MimeText(text_body, 'plain', 'utf-8'))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.smtp_username, self.smtp_password)
            text = msg.as_string()
            server.sendmail(self.smtp_username, self.manager_email, text)
            server.quit()
            
            print(f"‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_data['id']}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_all_notifications(self, application_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print(f"üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_data['id']}")
        
        results = {
            'telegram': False,
            'email': False
        }
        
        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        try:
            results['telegram'] = await self.send_telegram_notification(application_data)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        try:
            results['email'] = self.send_email_notification(application_data)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        sent_notifications = [k for k, v in results.items() if v]
        if sent_notifications:
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {', '.join(sent_notifications)}")
        else:
            print("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        return results
    
    async def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        if not TELEGRAM_AVAILABLE:
            print("‚ùå Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return False
            
        try:
            from database_service import DatabaseService
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date()
            total_apps = DatabaseService.get_applications_count()
            recent_apps = DatabaseService.get_recent_applications(limit=10)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today_apps = [app for app in recent_apps if app.created_at.date() == today]
            
            if not self.admin_chat_id or not self.bot_token:
                print("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –¥–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            bot = Bot(token=self.bot_token)
            
            report_message = (
                f"üìä **–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢** - {today.strftime('%d.%m.%Y')}\n\n"
                f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_apps}\n"
                f"‚Ä¢ –ó–∞—è–≤–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_apps)}\n\n"
            )
            
            if today_apps:
                report_message += "üÜï **–ó–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
                for app in today_apps:
                    package_name = {
                        'basic': '–ë–∞–∑–æ–≤—ã–π',
                        'advanced': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
                        'premium': '–ü—Ä–µ–º–∏—É–º'
                    }.get(app.package_interest, '–Ω–µ —É–∫–∞–∑–∞–Ω')
                    
                    report_message += (
                        f"‚Ä¢ #{app.id} - {app.name} ({app.phone}) - {package_name}\n"
                    )
            else:
                report_message += "üì≠ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç\n"
            
            report_message += f"\nüîó [–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å](https://my-chatbot-landing.herokuapp.com)"
            
            await bot.send_message(
                chat_id=self.admin_chat_id,
                text=report_message,
                parse_mode="Markdown"
            )
            
            await bot.session.close()
            print("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
